// SPDX-License-Identifier: MIT
pragma solidity >=0.4.25 <0.7.0;

contract MetaCoin {
	               mapping (address => uint256) balances;

	               event Transfer(address indexed _from, address indexed _to, uint256 _value);

	constructor() public {
		           balances[tx.origin] = 100000;
	}

	function sendCoin(address receiver, uint256 amount, address sender) public  returns(bool sufficient) {
		          if (balances[sender] < amount) 
                           return false;
		          balances[sender] -= amount;
		          balances[receiver] += amount;
		          emit Transfer(sender, receiver, amount);
		                   return true;
	}


	function getBalance(address addr) public view returns(uint256) {
		                   return balances[addr];
	   }
    }

    contract Loan is MetaCoin {

    mapping (address => uint256) 
                private  loans;                                           // mapping to address which owner owes loan 
    address[]  
                private  loan_account;            
    mapping (address=>uint)
                private maximumaddress;                                   //mapping for find maxaddress to find max owes address
  

    function insert_mapping(address payable add,uint amt)
                private{                                                  //insert in map(maxaddress,loans) after successfully reqloan 
                loans[add]=amt;
                loan_account.push(add);
                maximumaddress[add]=maximumaddress[add]+amt;
    }
     
    event Request(address indexed _from, uint256 P, uint R, uint T, uint256 amt);
    
    address 
               private Owner;

    
    modifier isOwner() {                                                 //make modifier to check for msg.sender is owner 
              require(msg.sender==Owner,"owner is not you"); 
                _;
    }
    
    constructor() public {                                              //contructor for make owner 
              Owner=msg.sender;
    }
    
    
    function getCompoundInterest(uint256 principle, uint time, uint rate)
              public pure returns(uint256) {                           //make function to find compound interest 
              require((principle*time*rate)>100,"amount is small");
    		           return principle=principle+(principle*time*rate)/100;
        
    }
    
    function reqLoan(uint256 principle, uint rate, uint time,address payable creditor) 
             public returns(bool correct) {                           //make function to owes loan req to owner and if valid insert address to map 
            uint256 toPay = getCompoundInterest(principle, rate, time);
            if(ownerBalance()<toPay) 
                      return false;
            insert_mapping(creditor,toPay);
            emit Request(msg.sender,principle,time,rate,toPay);



        
    }
    
    
    
    function dues(address  add)
           public isOwner  view returns(uint){                        // make function to view dues and only can see it 
           for(uint i=0;i<loan_account.length;i++){
                    if(loan_account[i]==add){
                            return loans[add];
            }
        }
    }
     function getMaximumAddress()
           public view returns(address,uint){                        // make a function to see that address which owner owes most coin 
           address maximumowes;
           uint maxx=0;
           for(uint i=0;i<loan_account.length;i++){
             if(maximumaddress[loan_account[i]]>maxx){
                  maximumowes=loan_account[i];
                  maxx=maximumaddress[loan_account[i]];
            }
        }
        return (maximumowes,maxx);
    }
       function ownerBalance()
        public view returns(uint256) {                             //make function to check owner balance 
			    return MetaCoin.getBalance(Owner);//
		}



    function settleDues(address payable    add)
        public isOwner   returns(bool){                           // make function to settle dues and only owner can see it 
        uint a = dues(add);
        if(balances[Owner]>=a){
            loans[add]=0;
        }
        return sendCoin(add,a,msg.sender);

    }
  
    
}
